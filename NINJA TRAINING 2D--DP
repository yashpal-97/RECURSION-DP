// YOU ARE GIVEN A 2D ARRAY OF SIZE N*3 POINTS WITH THE POINTS CORRESPONDING TO EACH DAY AND ACTIVITY.
YOUR TASK IS TO CALCULATE THE MAXIMUM NUMBER OF MERIT POINTS THAT NINJA CAN EARN.

//-------------------------RECURSION------------------------------//
//-----TC=O(3^N)-----SC=O(N)---------------//

#include<bits/stdc++.h>
//yashpal
#define ll long long
#define input for(ll i=0;i<n;i++){ll x;cin>>x;v.push_back(x);}
using namespace std;
int f(int day,int last ,vector<vector<int>>&v){
    if(day==0){
        int maxi=0;
        for(int task=0;task<3;task++){
if(task!=last){
    maxi=max(maxi,v[0][task]);
}
        }
        return maxi;
    }
    int maxi=0;
    for(int task=0;task<3;task++){
        if(task!=last){
            int x=v[day][task]+f(day-1,task,v);
            maxi=max(maxi,x);
        }
    }
    return maxi;
}

signed main()
{
ios_base :: sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
    
    int n;cin>>n;
    vector<vector<int>>v(n,vector<int>(3,-1));
    for(int i=0;i<n;i++){
        for(int j=0;j<3;j++){
            int x;cin>>x;
            v[i][j]=x;
        }
    }
    cout<<f(n-1,3,v)<<endl;



    return 0;
}

//-----------------------------MEMOIZATION-------------------------------------//
//----TC=O(N*4)----SC=O(N*4)+O(N)-----------------//

#include<bits/stdc++.h>
//yashpal
#define ll long long
#define input for(ll i=0;i<n;i++){ll x;cin>>x;v.push_back(x);}
using namespace std;
int f(int day,int last ,vector<vector<int>>&v,vector<vector<int>>&dp){
    if(day==0){
        int maxi=0;
        for(int task=0;task<3;task++){
if(task!=last){
    maxi=max(maxi,v[0][task]);
}
        }
        return maxi;
    }
    if(dp[day][last]!=-1){
        return dp[day][last];
    }
    int maxi=0;
    for(int task=0;task<3;task++){
        if(task!=last){
            int x=v[day][task]+f(day-1,task,v,dp);
            maxi=max(maxi,x);
        }
    }
    return dp[day][last]=maxi;
}

signed main()
{
ios_base :: sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
    
    int n;cin>>n;
    vector<vector<int>>v(n,vector<int>(3,-1));
    vector<vector<int>>dp(n,vector<int>(4,-1));
    for(int i=0;i<n;i++){
        for(int j=0;j<3;j++){
            int x;cin>>x;
            v[i][j]=x;
        }
    }
    cout<<f(n-1,3,v,dp)<<endl;



    return 0;
}


//-----------------------------TABULATION----------------------------------//
// ---------------TC=O(N*4*3)---SC=O(N*4)--------------------//

#include<bits/stdc++.h>
//yashpal
#define ll long long
#define input for(ll i=0;i<n;i++){ll x;cin>>x;v.push_back(x);}
using namespace std;

signed main()
{
ios_base :: sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
    
    int n;cin>>n;
    vector<vector<int>>v(n,vector<int>(3,-1));
   
    for(int i=0;i<n;i++){
        for(int j=0;j<3;j++){
            int x;cin>>x;
            v[i][j]=x;
        }
    }
 vector<vector<int>>dp(n,vector<int>(4,-1));
    dp[0][0]=max(v[0][1],v[0][2]);
    dp[0][1]=max(v[0][0],v[0][2]);
    dp[0][2]=max(v[0][1],v[0][0]);
    dp[0][3]=max(v[0][1],max(v[0][2],v[0][0]));

    for(int day=1;day<n;day++){
        for(int last=0;last<4;last++){
            dp[day][last]=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    int x=v[day][task]+dp[day-1][task];
                     dp[day][last]=max( dp[day][last],x);
                }
            }
        }
    }
    cout<<dp[n-1][3]<<endl;
 return 0;
}


//---------------------------SPACE-OPTIMISED---------------------------//
//-----TC=O(N*4)----SC=(4)----------//

#include<bits/stdc++.h>
//yashpal
#define ll long long
#define input for(ll i=0;i<n;i++){ll x;cin>>x;v.push_back(x);}
using namespace std;

signed main()
{
ios_base :: sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
    
    int n;cin>>n;
    vector<vector<int>>v(n,vector<int>(3,-1));
   
    for(int i=0;i<n;i++){
        for(int j=0;j<3;j++){
            int x;cin>>x;
            v[i][j]=x;
        }
    }


    vector<int>prev(4,0);
    prev[0]=max(v[0][1],v[0][2]);
    prev[1]=max(v[0][0],v[0][2]);
    prev[2]=max(v[0][1],v[0][0]);
    prev[3]=max(v[0][1],max(v[0][2],v[0][0]));

    for(int day=1;day<n;day++){
        vector<int>temp(4,0);
        for(int last=0;last<4;last++){
            temp[last]=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    int x=v[day][task]+prev[task];
                     temp[last]=max(temp[last],x);
                }
            }
            
        }
        prev=temp;
    }

    cout<<prev[3]<<endl;
 return 0;
}
