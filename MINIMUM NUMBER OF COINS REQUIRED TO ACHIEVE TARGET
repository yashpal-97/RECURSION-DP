//--------------------------RECURSION-------------------------------------//
//-----TC==EXPONENTIAL---------------------SPACE COMPEXITY==TARGET------------//

#include <bits/stdc++.h> 
int f(int idx,vector<int>&num,int target){
    if(idx==0){
        if(target%num[0]==0){
            return target/num[idx];
        }
        else{
            int maxi=1e9;
            return maxi;
        }
    }
    int nottake=0+f(idx-1,num,target);
    int take=INT_MAX;
    if(target>=num[idx]){
        take=1+f(idx,num,target-num[idx]);
    }
    return min(take,nottake);
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    int n=num.size();
    int ans= f(n-1,num,x);
    if(ans>=1e9){
        return -1;
    }
    else{
        return ans;
    }
}

//------------------------MEMOIZATION-----------------------//
//----TC==O(N*TARGET)------------------sc==O(N*T) + O(N)----//

#include <bits/stdc++.h> 
int f(int idx,vector<int>&num,int target, vector<vector<int>>&dp){
    if(idx==0){
        if(target%num[0]==0){
            return target/num[idx];
        }
        else{
            int maxi=1e9;
            return maxi;
        }
    }
    if(dp[idx][target]!=-1){
        return dp[idx][target];
    }
    int nottake=0+f(idx-1,num,target,dp);
    int take=INT_MAX;
    if(target>=num[idx]){
        take=1+f(idx,num,target-num[idx],dp);
    }
    return dp[idx][target]=min(take,nottake);
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
      int n=num.size();
    vector<vector<int>>dp(n,vector<int>(x+1,-1));
  
    int ans= f(n-1,num,x,dp);
    if(ans>=1e9){
        return -1;
    }
    else{
        return ans;
    }
}

//-------------------------------------TABULATION--------------------------//
//----TC==O(N*TARGET)--------------------------------SC==O(N*TARGET)------//

#include <bits/stdc++.h> 

int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
      int n=num.size();
    vector<vector<int>>dp(n,vector<int>(x+1,-1));
  
   for(int i=0;i<=x;i++){
       if(i%num[0]==0){
           dp[0][i]=i/num[0];
       }
       else{
           dp[0][i]=1000000009;
       }
   }
    
    for(int i=1;i<n;i++){
        for(int j=0;j<=x;j++){
            int nottake=0+dp[i-1][j];
    int take=1000000009;
    if(j>=num[i]){
        take=1+dp[i][j-num[i]];
    }
            dp[i][j]=min(take,nottake);
        }
    }
    if(dp[n-1][x]>=1000000009){
        return -1;
    }
    else{
        return dp[n-1][x];
    }
   }
