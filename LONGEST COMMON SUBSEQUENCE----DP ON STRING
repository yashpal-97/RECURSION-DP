//-----------------------------RECURSION-----------------------//
//-----------TC==O(2^N*2^M)---------------SC==O(N*M)-----------//
class Solution {
public:
int f(int idx1,int idx2,string &text1,string &text2){
    if(idx1<0||idx2<0){
        return 0;
    }
    if(text1[idx1]==text2[idx2]){
        return 1+f(idx1-1,idx2-1,text1,text2);
    }
    return max(f(idx1-1,idx2,text1,text2),f(idx1,idx2-1,text1,text2));
}
    int longestCommonSubsequence(string text1, string text2) {
        return f(text1.size()-1,text2.size()-1,text1,text2);
    }
};

//-------------------------MEMOIZATION---------------------------//
//----------TC==O(N*M)-----------------SC===O(N*M)+O(N+M)--------//
class Solution {
public:
int f(int idx1,int idx2,string &text1,string &text2,  vector<vector<int>>&dp){
    if(idx1<0||idx2<0){
        return 0;
    }
    if(dp[idx1][idx2]!=-1){
        return dp[idx1][idx2];
    }
    if(text1[idx1]==text2[idx2]){
        return dp[idx1][idx2]=1+f(idx1-1,idx2-1,text1,text2,dp);
    }
    return dp[idx1][idx2]=max(f(idx1-1,idx2,text1,text2,dp),f(idx1,idx2-1,text1,text2,dp));
}
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>>dp(text1.size(),vector<int>(text2.size(),-1));
        return f(text1.size()-1,text2.size()-1,text1,text2,dp);
    }
};

//-----------------------------------------------TABULATION-------------------------------------//
//----------TC==O(N*M)----------SC==O(N*M)-----------------------------------------------------------------------//

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>>dp(text1.size()+1,vector<int>(text2.size()+1,0));
        for(int i=0;i<=text1.size();i++){
            dp[i][0]=0;
        }
        for(int i=0;i<=text2.size();i++){
            dp[0][i]=0;
        }
        for(int idx1=1;idx1<=text1.size();idx1++){
            for(int idx2=1;idx2<=text2.size();idx2++){
 if(text1[idx1-1]==text2[idx2-1]){
         dp[idx1][idx2]=1+dp[idx1-1][idx2-1];
    }
    else{
 dp[idx1][idx2]=max(dp[idx1-1][idx2],dp[idx1][idx2-1]);
    }
            }
        }
 return dp[text1.size()][text2.size()];
    }
};

//--------------------------------------SPACE OPTIMISATION---------------------------------------//
//-----------TC==O(N*M)------SC==O(M)---------------------------------------------//

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<int>prev(text2.size()+1,0),curr(text2.size()+1,0);
        
        for(int i=0;i<=text2.size();i++){
            prev[i]=0;
        }
        for(int idx1=1;idx1<=text1.size();idx1++){
            for(int idx2=1;idx2<=text2.size();idx2++){
 if(text1[idx1-1]==text2[idx2-1]){
         curr[idx2]=1+prev[idx2-1];
    }
    else{
 curr[idx2]=max(prev[idx2],curr[idx2-1]);
    }
            }
            prev=curr;
        }
 return prev[text2.size()];
    }
};













