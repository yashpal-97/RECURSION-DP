//--GIVEN A DIFFERENCE 'D', COUNT THE NUMBER OF PARTITIONS IN WHICH S1>=S2.
//INCLUDES ZERO ASN AN ELEMENT

//---------------MEMOIZED SOLUTION----------------------//
//---TC=O(N*TAR)----------------SC=O(N)+O(N*TAR)-------//
#include <bits/stdc++.h> 
int f(int idx,vector<int>&num,int tar,  vector<vector<int>>&dp){
    if(idx==0){
        if(tar==0&&num[0]==0)return 2;
        if(tar==0||tar==num[0])return 1;
        return 0;
       }
    if(dp[idx][tar]!=-1){
        return dp[idx][tar];
    }
        int nottake=f(idx-1,num,tar,dp);
    int take=0;
    if(num[idx]<=tar){
     take=f(idx-1,num,tar-num[idx],dp);
    }

    return dp[idx][tar]=(take+nottake)%1000000007;
}
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    vector<vector<int>>dp(num.size(),vector<int>(tar+1,-1));
    return f(num.size()-1,num,tar,dp);
}
int countPartitions(int n, int d, vector<int> &arr) {
    int  totsum=0;
    for(int i=0;i<n;i++){
        totsum+=arr[i];
    }
    if(totsum-d<0||(totsum-d)&1) return false;
    
    return findWays(arr,(totsum-d)/2);
    
}

//--------------------------TABULATION------------------------//

#include <bits/stdc++.h> 

int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    int n=num.size();
    vector<vector<int>>dp(num.size(),vector<int>(tar+1,0));
   if(num[0]==0)dp[0][0]=2;
    else dp[0][0]=1;
    
    if(num[0]!=0&&num[0]<=tar) dp[0][num[0]]=1;
    for(int idx=1;idx<n;idx++){
        for(int sum=0;sum<=tar;sum++){
            int nottake=dp[idx-1][sum];
            int take=0;
            if(num[idx]<=sum) take=dp[idx-1][sum-num[idx]];
            dp[idx][sum]=(nottake+take)%1000000007;
        }
    }
    return dp[n-1][tar];
    
}
int countPartitions(int n, int d, vector<int> &arr) {
    int  totsum=0;
    for(int i=0;i<n;i++){
        totsum+=arr[i];
    }
    if(totsum-d<0||(totsum-d)&1) return false;
    
    return findWays(arr,(totsum-d)/2);
    
}





